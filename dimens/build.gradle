plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
}

android {
    compileSdk 31

    defaultConfig {
        minSdk 22
        targetSdk 31

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}
afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                groupId = 'com.github.grigornazaryan'
                artifactId = 'dimens'
                version = '1.0'
            }
        }
    }
}
public class SDPFactory extends DefaultTask {

    @Input
    String unit = "sp"
    @Input
    double positiveMax = 600
    @Input
    double negativeMax = 60

    @TaskAction
    def create() {
        String resFolder =  project.getProjectDir().getPath() + "/src/main/res/";
        for(double dimen = 300; dimen <= 800 ; dimen = dimen + 20){
            String folder = resFolder + "values-sw" + (int)dimen + "dp";
            String fileName = folder + "/msp.xml";
            new File(folder).mkdir();
            new File(fileName).createNewFile();
            PrintWriter printWriter = new PrintWriter(fileName);
            printWriter.println("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
            printWriter.println("<resources>");
            for(int i=1; i<=positiveMax; i++){
                double ratio = ((dimen-300d)/400d+1);
                double sp = ratio*i;
                printWriter.printf("\t<dimen name=\"_%dmsp\">%.2f" + unit + "</dimen>\r\n",i,sp);
            }
            printWriter.println("</resources>");
            printWriter.close();
        }
    }
}
    task createSDP(type: SDPFactory) {
    }

//uncomment next line to edit values
//preBuild.dependsOn createSDP

    createSDP{
        unit = "sp"//change to "sp" if needed
        positiveMax = 600//change to 600 or any other value if needed
        negativeMax = 60//change to 600 or any other value if needed
    }
